import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import vegaEmbed from 'vega-embed';
import shallowEqual from './utils/shallowEqual';
import getUniqueFieldNames from './utils/getUniqueFieldNames';
import { NOOP } from './constants';
import addSignalListenersToView from './utils/addSignalListenersToView';
import computeSpecChanges from './utils/computeSpecChanges';
import removeSignalListenersFromView from './utils/removeSignalListenersFromView';
import combineSpecWithDimension from './utils/combineSpecWithDimension';
export default class VegaEmbed extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "containerRef", /*#__PURE__*/React.createRef());

    _defineProperty(this, "resultPromise", void 0);

    _defineProperty(this, "handleError", error => {
      const {
        onError = NOOP
      } = this.props;
      onError(error, this.containerRef.current); // eslint-disable-next-line no-console

      console.warn(error);
      return undefined;
    });

    _defineProperty(this, "modifyView", action => {
      if (this.resultPromise) {
        this.resultPromise.then(result => {
          if (result) {
            action(result.view);
          }

          return true;
        }).catch(this.handleError);
      }
    });
  }

  componentDidMount() {
    this.createView();
  }

  componentDidUpdate(prevProps) {
    const fieldSet = getUniqueFieldNames([this.props, prevProps]);
    fieldSet.delete('className');
    fieldSet.delete('signalListeners');
    fieldSet.delete('spec');
    fieldSet.delete('style');
    fieldSet.delete('width');
    fieldSet.delete('height'); // Only create a new view if necessary

    if (Array.from(fieldSet).some(f => this.props[f] !== prevProps[f])) {
      this.clearView();
      this.createView();
    } else {
      const specChanges = computeSpecChanges(combineSpecWithDimension(this.props), combineSpecWithDimension(prevProps));
      const {
        signalListeners: newSignalListeners
      } = this.props;
      const {
        signalListeners: oldSignalListeners
      } = prevProps;

      if (specChanges) {
        if (specChanges.isExpensive) {
          this.clearView();
          this.createView();
        } else {
          const areSignalListenersChanged = !shallowEqual(newSignalListeners, oldSignalListeners);
          this.modifyView(view => {
            if (specChanges.width !== false) {
              view.width(specChanges.width);
            }

            if (specChanges.height !== false) {
              view.height(specChanges.height);
            }

            if (areSignalListenersChanged) {
              if (oldSignalListeners) {
                removeSignalListenersFromView(view, oldSignalListeners);
              }

              if (newSignalListeners) {
                addSignalListenersToView(view, newSignalListeners);
              }
            }

            view.run();
          });
        }
      } else if (!shallowEqual(newSignalListeners, oldSignalListeners)) {
        this.modifyView(view => {
          if (oldSignalListeners) {
            removeSignalListenersFromView(view, oldSignalListeners);
          }

          if (newSignalListeners) {
            addSignalListenersToView(view, newSignalListeners);
          }

          view.run();
        });
      }
    }
  }

  componentWillUnmount() {
    this.clearView();
  }

  createView() {
    const {
      spec,
      onNewView,
      signalListeners = {},
      width,
      height,
      ...options
    } = this.props;

    if (this.containerRef.current) {
      const finalSpec = combineSpecWithDimension(this.props);
      this.resultPromise = vegaEmbed(this.containerRef.current, finalSpec, options).then(result => {
        if (result) {
          const {
            view
          } = result;

          if (addSignalListenersToView(view, signalListeners)) {
            view.run();
          }
        }

        return result;
      }).catch(this.handleError);

      if (onNewView) {
        this.modifyView(onNewView);
      }
    }
  }

  clearView() {
    if (this.resultPromise) {
      this.resultPromise.then(result => {
        if (result) {
          result.finalize();
        }
      }).catch(this.handleError);
    }

    this.resultPromise = undefined;
    return this;
  }

  render() {
    const {
      className,
      style
    } = this.props; // Create the container Vega draws inside

    return /*#__PURE__*/React.createElement("div", {
      ref: this.containerRef,
      className: className,
      style: style
    });
  }

}

_defineProperty(VegaEmbed, "propTypes", {
  className: _pt.string,
  onError: _pt.func
});