import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import shallowEqual from './utils/shallowEqual';
import updateMultipleDatasetsInView from './utils/updateMultipleDatasetsInView';
import VegaEmbed from './VegaEmbed';
import { NOOP } from './constants';
const EMPTY = {};
export default class Vega extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "vegaEmbed", /*#__PURE__*/React.createRef());

    _defineProperty(this, "handleNewView", view => {
      this.update();
      const {
        onNewView = NOOP
      } = this.props;
      onNewView(view);
    });
  }

  componentDidMount() {
    this.update();
  }

  componentDidUpdate(prevProps) {
    if (!shallowEqual(this.props.data, prevProps.data)) {
      this.update();
    }
  }

  update() {
    const {
      data
    } = this.props;

    if (this.vegaEmbed.current && data && Object.keys(data).length > 0) {
      this.vegaEmbed.current.modifyView(view => {
        updateMultipleDatasetsInView(view, data);
        view.resize().run();
      });
    }
  }

  render() {
    const {
      data,
      ...restProps
    } = this.props;
    return /*#__PURE__*/React.createElement(VegaEmbed, _extends({
      ref: this.vegaEmbed
    }, restProps, {
      onNewView: this.handleNewView
    }));
  }

}

_defineProperty(Vega, "defaultProps", {
  data: EMPTY
});